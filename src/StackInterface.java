/**
 * Interface detailing the methods required for implementing a Stack. You will
 * be implementing a stack using both a LinkedList and an Array.
 * DO NOT EDIT THIS FILE!
 *
 * @author CS 1332 TAs
 * @version 1.1
 */
public interface StackInterface<T> {
    // DO NOT ALTER OR ADD ANY INSTANCE OR CLASS VARIABLES!
    int INITIAL_CAPACITY = 10;

    /**
     * Pushes a node with the given data onto the stack.
     *
     * This method should be implemented in O(1) time for the linked list-backed
     * implementation and amortized O(1) time for the array-backed
     * implementation.
     *
     * For the array-backed implementations, if the array is completely filled
     * when trying to push, double the size of the array first before adding.
     *
     * @param data the data to push
     * @throws IllegalArgumentException if {@code data} is null
     */
    void push(T data);

    /**
     * Pops an item from the stack.
     *
     * This method should be implemented in O(1) time.
     *
     * For array-backed implementations:
     * - you should not shrink the backing array.
     * - you must put {@code null} in the popped element's slot.
     *
     * @return the data from the top of the stack
     * @throws java.util.NoSuchElementException if the stack is empty
     */
    T pop();

    /**
     * Returns the size of the stack as an integer.
     *
     * This method should be implemented in O(1) time.
     *
     * @return the number of items in the stack
     */
    int size();

    /**
     * Return true if empty, false otherwise.
     *
     * This method should be implemented in O(1) time.
     *
     * @return boolean representing whether the list is empty
     */
    boolean isEmpty();
}
